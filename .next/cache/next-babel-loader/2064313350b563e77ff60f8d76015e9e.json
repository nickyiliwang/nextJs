{"ast":null,"code":"import allquotes from \"../../util/quotes.json\"; // Level 1 with hard coded\n// export default (req, res) => {\n//   res.status(200).json({\n//     quote: \"Write tests, not too many, mostly integration\",\n//     author: \"Guillermo Rauch\"\n//   });\n// };\n// Level 2 with JSON file\n// export default (req, res) => {\n//   const quote = quotes[Math.floor(Math.random() * quotes.length)];\n//   res.status(200).json(quote);\n// };\n// Level 3 having a search function\n\nexport default ((req, res) => {\n  const {\n    author\n  } = req.query;\n  let quotes = allQuotes;\n\n  if (author) {\n    quotes = quotes.filter(quote => quote.author.toLowerCase().includes(author.toLowerCase()));\n  }\n\n  if (!quotes.length) {\n    quotes = allQuotes.filter(quote => quote.author.toLowerCase() === \"unknown\");\n  }\n\n  const quote = quotes[Math.floor(Math.random() * quotes.length)];\n  res.status(200).json(quote);\n});","map":{"version":3,"sources":["C:/Users/w_yil/OneDrive/Desktop/nextJs/pages/api/randomQuote.js"],"names":["allquotes","req","res","author","query","quotes","allQuotes","filter","quote","toLowerCase","includes","length","Math","floor","random","status","json"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,wBAAtB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AACA,gBAAe,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC3B,QAAM;AAAEC,IAAAA;AAAF,MAAaF,GAAG,CAACG,KAAvB;AACA,MAAIC,MAAM,GAAGC,SAAb;;AAEA,MAAIH,MAAJ,EAAY;AACVE,IAAAA,MAAM,GAAGA,MAAM,CAACE,MAAP,CAAcC,KAAK,IAC1BA,KAAK,CAACL,MAAN,CAAaM,WAAb,GAA2BC,QAA3B,CAAoCP,MAAM,CAACM,WAAP,EAApC,CADO,CAAT;AAGD;;AAED,MAAI,CAACJ,MAAM,CAACM,MAAZ,EAAoB;AAClBN,IAAAA,MAAM,GAAGC,SAAS,CAACC,MAAV,CACPC,KAAK,IAAIA,KAAK,CAACL,MAAN,CAAaM,WAAb,OAA+B,SADjC,CAAT;AAGD;;AAED,QAAMD,KAAK,GAAGH,MAAM,CAACO,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBT,MAAM,CAACM,MAAlC,CAAD,CAApB;AAEAT,EAAAA,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBR,KAArB;AACD,CAnBD","sourcesContent":["import allquotes from \"../../util/quotes.json\";\r\n\r\n// Level 1 with hard coded\r\n// export default (req, res) => {\r\n//   res.status(200).json({\r\n//     quote: \"Write tests, not too many, mostly integration\",\r\n//     author: \"Guillermo Rauch\"\r\n//   });\r\n// };\r\n\r\n// Level 2 with JSON file\r\n// export default (req, res) => {\r\n//   const quote = quotes[Math.floor(Math.random() * quotes.length)];\r\n//   res.status(200).json(quote);\r\n// };\r\n\r\n// Level 3 having a search function\r\nexport default (req, res) => {\r\n  const { author } = req.query;\r\n  let quotes = allQuotes;\r\n\r\n  if (author) {\r\n    quotes = quotes.filter(quote =>\r\n      quote.author.toLowerCase().includes(author.toLowerCase())\r\n    );\r\n  }\r\n\r\n  if (!quotes.length) {\r\n    quotes = allQuotes.filter(\r\n      quote => quote.author.toLowerCase() === \"unknown\"\r\n    );\r\n  }\r\n\r\n  const quote = quotes[Math.floor(Math.random() * quotes.length)];\r\n\r\n  res.status(200).json(quote);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}